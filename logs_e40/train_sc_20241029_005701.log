2024-10-29 00:57:01,272 | INFO | Starting hyperparameter search
2024-10-29 00:57:01,272 | INFO | Hyperparameter search space:
2024-10-29 00:57:01,272 | INFO | {
  "clip_lr": [
    1e-05,
    0.0001,
    5e-06
  ],
  "predictor_lr": [
    5e-05,
    0.0005,
    0.001
  ],
  "weight_decay": [
    0.001,
    0.05,
    0.1
  ],
  "beta1": [
    0.9,
    0.95
  ],
  "beta2": [
    0.999,
    0.9999
  ],
  "hidden_dim": [
    256,
    768,
    1024
  ],
  "dropout_rate": [
    0.1,
    0.3,
    0.4,
    0.5
  ],
  "num_hidden_layers": [
    1,
    2,
    3
  ]
}
2024-10-29 00:57:11,380 | INFO | Dataset loaded successfully with 70213 samples
2024-10-29 00:57:11,384 | INFO | Dataset split: 63192 train, 7021 validation samples
2024-10-29 00:57:11,386 | INFO | Attribute dimensions:
2024-10-29 00:57:11,386 | INFO | {
  "Kurtis_color": 13,
  "Kurtis_fit_shape": 2,
  "Kurtis_length": 2,
  "Kurtis_occasion": 2,
  "Kurtis_ornamentation": 2,
  "Kurtis_pattern": 2,
  "Kurtis_print_or_pattern_type": 2,
  "Kurtis_sleeve_length": 3,
  "Kurtis_sleeve_styling": 2,
  "Men Tshirts_color": 4,
  "Men Tshirts_neck": 2,
  "Men Tshirts_pattern": 2,
  "Men Tshirts_print_or_pattern_type": 3,
  "Men Tshirts_sleeve_length": 2,
  "Sarees_blouse_pattern": 4,
  "Sarees_border": 6,
  "Sarees_border_width": 3,
  "Sarees_color": 8,
  "Sarees_occasion": 4,
  "Sarees_ornamentation": 3,
  "Sarees_pallu_details": 4,
  "Sarees_pattern": 5,
  "Sarees_print_or_pattern_type": 9,
  "Sarees_transparency": 2,
  "Women Tops & Tunics_color": 12,
  "Women Tops & Tunics_fit_shape": 4,
  "Women Tops & Tunics_length": 2,
  "Women Tops & Tunics_neck_collar": 7,
  "Women Tops & Tunics_occasion": 2,
  "Women Tops & Tunics_pattern": 3,
  "Women Tops & Tunics_print_or_pattern_type": 6,
  "Women Tops & Tunics_sleeve_length": 4,
  "Women Tops & Tunics_sleeve_styling": 4,
  "Women Tops & Tunics_surface_styling": 6,
  "Women Tshirts_color": 7,
  "Women Tshirts_fit_shape": 3,
  "Women Tshirts_length": 3,
  "Women Tshirts_pattern": 3,
  "Women Tshirts_print_or_pattern_type": 6,
  "Women Tshirts_sleeve_length": 3,
  "Women Tshirts_sleeve_styling": 2,
  "Women Tshirts_surface_styling": 2
}
2024-10-29 00:57:12,617 | INFO | 
Initialized model with architecture parameters:
2024-10-29 00:57:12,617 | INFO | Hidden Dim: 256, Dropout: 0.1, Layers: 1
2024-10-29 00:57:12,617 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:12,618 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.001, Beta1: 0.9, Beta2: 0.999
2024-10-29 00:57:12,618 | INFO | Starting new training run with validation
2024-10-29 00:57:12,622 | INFO | Training hyperparameters:
2024-10-29 00:57:12,623 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.001,
  "beta1": 0.9,
  "beta2": 0.999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:57:21,947 | INFO | CLIP model loaded successfully
2024-10-29 00:57:21,954 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:57:22,000 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:22,001 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.001, Beta1: 0.9, Beta2: 0.9999
2024-10-29 00:57:22,001 | INFO | Starting new training run with validation
2024-10-29 00:57:22,004 | INFO | Training hyperparameters:
2024-10-29 00:57:22,005 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.001,
  "beta1": 0.9,
  "beta2": 0.9999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:57:31,217 | INFO | CLIP model loaded successfully
2024-10-29 00:57:31,222 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:57:31,237 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:31,238 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.001, Beta1: 0.95, Beta2: 0.999
2024-10-29 00:57:31,238 | INFO | Starting new training run with validation
2024-10-29 00:57:31,241 | INFO | Training hyperparameters:
2024-10-29 00:57:31,242 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.001,
  "beta1": 0.95,
  "beta2": 0.999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:57:40,130 | INFO | CLIP model loaded successfully
2024-10-29 00:57:40,137 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:57:40,140 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:40,141 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.001, Beta1: 0.95, Beta2: 0.9999
2024-10-29 00:57:40,141 | INFO | Starting new training run with validation
2024-10-29 00:57:40,145 | INFO | Training hyperparameters:
2024-10-29 00:57:40,145 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.001,
  "beta1": 0.95,
  "beta2": 0.9999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:57:49,058 | INFO | CLIP model loaded successfully
2024-10-29 00:57:49,064 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:57:49,066 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:49,066 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.05, Beta1: 0.9, Beta2: 0.999
2024-10-29 00:57:49,066 | INFO | Starting new training run with validation
2024-10-29 00:57:49,069 | INFO | Training hyperparameters:
2024-10-29 00:57:49,069 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.05,
  "beta1": 0.9,
  "beta2": 0.999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:57:57,914 | INFO | CLIP model loaded successfully
2024-10-29 00:57:57,921 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:57:57,923 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:57:57,924 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.05, Beta1: 0.9, Beta2: 0.9999
2024-10-29 00:57:57,924 | INFO | Starting new training run with validation
2024-10-29 00:57:57,927 | INFO | Training hyperparameters:
2024-10-29 00:57:57,927 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.05,
  "beta1": 0.9,
  "beta2": 0.9999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:58:06,505 | INFO | CLIP model loaded successfully
2024-10-29 00:58:06,510 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:58:06,512 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:58:06,512 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.05, Beta1: 0.95, Beta2: 0.999
2024-10-29 00:58:06,512 | INFO | Starting new training run with validation
2024-10-29 00:58:06,515 | INFO | Training hyperparameters:
2024-10-29 00:58:06,515 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.05,
  "beta1": 0.95,
  "beta2": 0.999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:58:15,023 | INFO | CLIP model loaded successfully
2024-10-29 00:58:15,029 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:58:15,032 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:58:15,032 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.05, Beta1: 0.95, Beta2: 0.9999
2024-10-29 00:58:15,032 | INFO | Starting new training run with validation
2024-10-29 00:58:15,036 | INFO | Training hyperparameters:
2024-10-29 00:58:15,037 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.05,
  "beta1": 0.95,
  "beta2": 0.9999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
2024-10-29 00:58:23,223 | INFO | CLIP model loaded successfully
2024-10-29 00:58:23,227 | ERROR | Error in training run: some parameters appear in more than one parameter group
Traceback (most recent call last):
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 829, in main
    _, _, metrics = train_model_with_validation(
  File "/iitjhome/m23csa016/meesho_code/clipvit_uf_hyper_tune_val_sc.py", line 490, in train_model_with_validation
    optimizer = optim.AdamW([
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/adamw.py", line 72, in __init__
    super().__init__(params, defaults)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 367, in __init__
    self.add_param_group(cast(dict, param_group))
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_compile.py", line 31, in inner
    return disable_fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 600, in _fn
    return fn(*args, **kwargs)
  File "/iitjhome/m23csa016/.conda/envs/meesho/lib/python3.10/site-packages/torch/optim/optimizer.py", line 1045, in add_param_group
    raise ValueError("some parameters appear in more than one parameter group")
ValueError: some parameters appear in more than one parameter group
2024-10-29 00:58:23,229 | INFO | 
Starting training with optimizer parameters:
2024-10-29 00:58:23,229 | INFO | CLIP LR: 1e-05, Predictor LR: 5e-05, Weight Decay: 0.1, Beta1: 0.9, Beta2: 0.999
2024-10-29 00:58:23,229 | INFO | Starting new training run with validation
2024-10-29 00:58:23,232 | INFO | Training hyperparameters:
2024-10-29 00:58:23,233 | INFO | {
  "clip_lr": 1e-05,
  "predictor_lr": 5e-05,
  "weight_decay": 0.1,
  "beta1": 0.9,
  "beta2": 0.999,
  "num_epochs": 40,
  "patience": 10,
  "device": "cuda",
  "model_architecture": "CategoryAwareAttributePredictor(\n  (saree_cnn): SareeCNNModule(\n    (features): Sequential(\n      (0): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n        (1): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (2): Conv2dNormActivation(\n                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0, mode=row)\n          )\n        )\n        (2): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0125, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.025, mode=row)\n          )\n        )\n        (3): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)\n                (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.037500000000000006, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.05, mode=row)\n          )\n        )\n        (4): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n                (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.0625, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.07500000000000001, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.08750000000000001, mode=row)\n          )\n        )\n        (5): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)\n                (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1125, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.125, mode=row)\n          )\n        )\n        (6): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n                (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1375, mode=row)\n          )\n          (1): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.15000000000000002, mode=row)\n          )\n          (2): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1625, mode=row)\n          )\n          (3): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.17500000000000002, mode=row)\n          )\n        )\n        (7): Sequential(\n          (0): MBConv(\n            (block): Sequential(\n              (0): Conv2dNormActivation(\n                (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (1): Conv2dNormActivation(\n                (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)\n                (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (2): SiLU(inplace=True)\n              )\n              (2): SqueezeExcitation(\n                (avgpool): AdaptiveAvgPool2d(output_size=1)\n                (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))\n                (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))\n                (activation): SiLU(inplace=True)\n                (scale_activation): Sigmoid()\n              )\n              (3): Conv2dNormActivation(\n                (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (stochastic_depth): StochasticDepth(p=0.1875, mode=row)\n          )\n        )\n        (8): Conv2dNormActivation(\n          (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): SiLU(inplace=True)\n        )\n      )\n      (1): AdaptiveAvgPool2d(output_size=1)\n    )\n    (border_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (pallu_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (body_attention): Sequential(\n      (0): Conv2d(1280, 1, kernel_size=(1, 1), stride=(1, 1))\n      (1): Sigmoid()\n    )\n    (post_attention): Sequential(\n      (0): AdaptiveAvgPool2d(output_size=1)\n      (1): Flatten(start_dim=1, end_dim=-1)\n      (2): Linear(in_features=1280, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Dropout(p=0.3, inplace=False)\n    )\n  )\n  (saree_fusion): Sequential(\n    (0): Linear(in_features=1024, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.1, inplace=False)\n  )\n  (attribute_predictors): ModuleDict(\n    (Kurtis_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=13, bias=True)\n    )\n    (Kurtis_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_ornamentation): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Kurtis_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Kurtis_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Men Tshirts_neck): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Men Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Men Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Sarees_blouse_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_border): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Sarees_border_width): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_color): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=8, bias=True)\n    )\n    (Sarees_occasion): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_ornamentation): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Sarees_pallu_details): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Sarees_pattern): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=5, bias=True)\n    )\n    (Sarees_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=9, bias=True)\n    )\n    (Sarees_transparency): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=12, bias=True)\n    )\n    (Women Tops & Tunics_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_neck_collar): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tops & Tunics_occasion): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tops & Tunics_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tops & Tunics_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=4, bias=True)\n    )\n    (Women Tops & Tunics_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_color): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=7, bias=True)\n    )\n    (Women Tshirts_fit_shape): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_pattern): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_print_or_pattern_type): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=6, bias=True)\n    )\n    (Women Tshirts_sleeve_length): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=3, bias=True)\n    )\n    (Women Tshirts_sleeve_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n    (Women Tshirts_surface_styling): Sequential(\n      (0): Linear(in_features=768, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Linear(in_features=256, out_features=2, bias=True)\n    )\n  )\n)"
}
